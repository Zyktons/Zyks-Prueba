# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from openerp.osv import fields, osv
from datetime import datetime, date, time, timedelta
import time

class correspondencia_correspondencia(osv.osv):
    _name="correspondencia.correspondencia"
    _inherit = ['mail.thread']
    _name="correspondencia.correspondencia"
    _order = "fecha_recibido desc"
    _rec_name = "documento_no"

    def limpiar_selector(self, cr, uid, ids,tipo, context=None):
        res={}
        if tipo=="estante":
                res = {
                'nivel_id':'',

                }
        
        return {'value':res}


    def _get_attachment_number(self, cr, uid, ids, fields, args, context=None):
        res = dict.fromkeys(ids, 0)
        for app_id in ids:
            res[app_id] = self.pool['ir.attachment'].search_count(cr, uid, [('res_model', '=', 'correspondencia.correspondencia'), ('res_id', '=', app_id)], context=context)
        return res

  
         
    _columns={
        'documento_no': fields.char('Nro. de Documento', size=64, readonly=True),
        'remitente': fields.many2one('correspondencia.remitente','Remitente', required=True),
        'fecha_recibido':fields.datetime('Fecha de Recibido', required=True, readonly=True),
        'fecha_comunicacion':fields.date('Fecha de Comunicación'),
        'num_comunicacion':fields.char('N° Comunicación'),
        'asunto':fields.text('Asunto',size=250),
        'observaciones':fields.text('Observaciones',size=250,help='Observaciones de la correspondencia'),
        'instrucciones':fields.text('Instrucciones',size=250,help='Instrucciones de la correspondencia'),
        'unidades': fields.many2many('correspondencia.unidades','correspondencia_unidades_rel','unidades_ids','unidades','Unidades'),
        'accion_interna':fields.many2many('correspondencia.acciones','correspondencia_acciones_rel','accion_interna_ids', 'accion_interna'),
        'estante_id':fields.many2one('correspondencia.estante','Estantes'),
        'nivel_id':fields.many2one('correspondencia.nivel','Nivel'),
        'attachment_number': fields.function(_get_attachment_number, string='Number of Attachments', type="integer"),
        'state': fields.selection([
        ('correspondencia', 'En correspondencia'),
        ('secretaria', 'En revisión'),
        ('presidencia', 'Por firmar'), 
        ('firma', 'Firmado'),
        ('cancel', 'Cancelado')], 'Estado de operación', readonly=True),
    }
    
    _defaults = {
        'state': lambda *a: 'correspondencia',
        'fecha_recibido': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S'),
    }
    
    def draft_correspondencia(self,cr,uid,ids):
        self.write(cr, uid, ids, {'state':'correspondencia'})
        return True
    
    def cancelar_correspondencia(self,cr,uid,ids,context=None):
        if self.browse(cr,uid,ids,context=context).state=='secretaria' or self.browse(cr,uid,ids,context=context).state=='correspondencia':
            self.write(cr, uid, ids, {'state':'cancel'},context=context)
            return True

    def secretaria_revision(self,cr,uid,ids,context=None):
        if self.browse(cr,uid,ids,context=context).state=='correspondencia':
            self.write(cr, uid, ids, {'state':'secretaria'},context=context)
            return True
            
    def presidencia_firmar(self,cr,uid,ids,context=None):
        if self.browse(cr,uid,ids,context=context).state=='secretaria':
            self.write(cr, uid, ids, {'state':'presidencia'},context=context)
            return True

    def firma_directa(self,cr,uid,ids,context=None):
        if self.browse(cr,uid,ids,context=context).state=='correspondencia':
            self.write(cr, uid, ids, {'state':'presidencia'},context=context)
            return True
        
    def action_get_attachment_tree_view(self, cr, uid, ids, context=None):
        model, action_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'base', 'action_attachment')
        action = self.pool.get(model).read(cr, uid, action_id, context=context)
        action['context'] = {'default_res_model': self._name, 'default_res_id': ids[0]}
        action['domain'] = str(['&', ('res_model', '=', self._name), ('res_id', 'in', ids)])
        return action

    def create(self,cr,uid,values,context=None):
        values.update({
            'documento_no':self.pool.get('ir.sequence').get(cr,uid,'correspondencia.correspondencia')})
        return super(correspondencia_correspondencia,self).create(cr,uid,values,context=context)

        
class correspondencia_remitente(osv.osv):
    _name="correspondencia.remitente"
    _rec_name="nombre_remitente"
        
    _columns={
        'nombre_remitente':fields.char('Nombre'),
        'telefono':fields.char('Teléfono'),
        'is_ente':fields.boolean('Es ente'),
        'is_unidad':fields.boolean('Es unidad'),
        'is_parque':fields.boolean('Es parque'),
        'is_persona':fields.boolean('Es persona'),
    }
    
    
class correspondencia_unidades(osv.osv):
    _name="correspondencia.unidades"
    _rec_name="nombre_unidades"
    
    _columns={
        'nombre_unidades':fields.char('Nombre',size=150,required=True),
        'unidades_ids':fields.many2many('correspondencia.correspondencia','correspondencia_unidades_rel','unidades','unidades_ids','Unidades'),
    }
    
    
class correspondencia_acciones(osv.osv):
    _name="correspondencia.acciones"
    _rec_name="nombre_accion"

    _columns={
        'nombre_accion':fields.char('Acción interna',size=150,required=True),
        'accion_interna_ids':fields.many2many('correspondencia.correspondencia','correspondencia_acciones_rel','accion_interna','accion_interna_ids'),
    }
    
    
class correspondencia_estante(osv.osv):
    _name='correspondencia.estante'
    _rec_name='nombre_estante'

    _columns={
        'nombre_estante':fields.char('Estantes',size=150,required=True),
    }


class correspondencia_nivel(osv.osv):
    _name='correspondencia.nivel'
    _rec_name='nombre_nivel'

    _columns={
       'nombre_nivel':fields.char('Nivel',size=150,required=True),
       'estante_id':fields.many2one('correspondencia.estante','Estantes'),
        
    }

class correspondencia_documentos(osv.osv):
    _name="correspondencia.documentos"
    _inherit = ['ir.attachment']
   


    _columns={
       'name': fields.char('Attachment Name', required=True),

    }

class correspondencia_recepcion(osv.osv):
    _name='correspondencia.recepcion'
    _rec_name='remitente'

    _columns={
        'remitente': fields.many2one('correspondencia.remitente','Remitente',required=True),
        'emisor':fields.many2one('correspondencia.remitente','Emisor', required=True,help= 'Lugar a donde va dirigido la correspondencia'),
        'tipo_correspondencia': fields.selection([('caja', 'Caja'),('documento', 'Documento'),('sobre', 'Sobre'),('valija', 'Valija')], 'Tipos de documentos'),
        'unidades1': fields.many2many('correspondencia.unidades','correspondencia_unidades_rel1','unidades_ids','unidades1','Unidades'),
        'state': fields.selection([
        ('espera', 'En espera'),
        ('entregado', 'Entregado')], 'Estado de operación', readonly=True)
    }

    def draft_espera(self,cr,uid,ids):
        self.write(cr, uid, ids, {'state':'espera'})
        return True

    _defaults = {
        'state': lambda *a: 'espera',
    }

class correspondencia_gestion_presidencia(osv.osv):
    _name='correspondencia.gestion.presidencia'

    
    _columns={
        'fecha_ingreso': fields.date('Fecha De Ingreso', help="Fecha de ingreso"),
        'fecha_firma': fields.date('Fecha Firma'),
        'ingresado_por': fields.char('Ingresado Por',size=50, help="persona que llena el documento"),
        'egresado_por': fields.char('Egresado Por',size=50),
        'ente': fields.many2one('correspondencia.remitente','Ente', help="Ente/Persona"),
        'tipo_documento': fields.char('Tipo de Documento'),
        'numero_comunicado': fields.char('N° de comunicado'),
        'asunto': fields.text('Asunto'),
        'hoja_accion': fields.char('Hoja Acción'),
        'observacion':fields.text('Observaciones'),
        'is_providencia':fields.boolean('Providencia'),
        'is_consultoria':fields.boolean('Consultoría'),
        'is_ingresos':fields.boolean('Ingresos Propios'),
        'is_cheques':fields.boolean('Cheques'),
        'is_personal':fields.boolean('Personal'),
        'is_infraestructura':fields.boolean('Infraestructura'),
        'is_dir_general':fields.boolean('Dirección General'),
        'is_pto_cuenta':fields.boolean('Punto Cuenta'),
        'is_transferencia':fields.boolean('Transferencia'),
        'is_administracion':fields.boolean('Administración'),
        'is_upe':fields.boolean('UPE'),
        'is_auditoria':fields.boolean('Auditoría Interna'),
        'is_planificacion':fields.boolean('Planificación'),
        'is_informatica':fields.boolean('Informática'),
    }

class correspondencia_providencia(osv.osv):
    _name='correspondencia.providencia'
    _inherits = {'correspondencia.gestion.presidencia':'providencia_id'}
    _rec_name='ente'

    _columns={
        'direccion_remitiente': fields.many2one('correspondencia.remitente','Direccion Remitente',required=True),
        'providencia_id':fields.many2one('correspondencia.gestion.presidencia','Providencia'),
    }
    
    _defaults={
        'is_providencia':True, 
    }

class correspondencia_consultoria(osv.osv):
    _name='correspondencia.consultoria'
    _inherits = {'correspondencia.gestion.presidencia':'consultoria_id'}
    _rec_name='ente'

    _columns={
        'consultoria_id':fields.many2one('correspondencia.gestion.presidencia','Consultoria'),
    }

    _defaults={
        'is_consultoria':True, 
    }
    
class correspondencia_ingresos_propios(osv.osv):
    _name='correspondencia.ingresos.propios'
    _inherits = {'correspondencia.gestion.presidencia':'ingresos_propios_id'}
    _rec_name='ente'

    _columns={
        'ingresos_propios_id':fields.many2one('correspondencia.gestion.presidencia','Ingresos Propios'),
    }

    _defaults={
        'is_ingresos':True, 
    }

class correspondencia_cheques(osv.osv):
    _name='correspondencia.cheques'
    _inherits = {'correspondencia.gestion.presidencia':'cheques_id'}
    _rec_name='ente'

    _columns={
        'n_cheque': fields.integer('N° de Cheque'),
        'cheque_monto': fields.float('Monto'),
        'beneficiario': fields.char('Beneficiario',size=50),
        'cheques_id':fields.many2one('correspondencia.gestion.presidencia','Ingresos Propios'),
    }

    _defaults={
        'is_cheques':True, 
    }

class correspondencia_personal(osv.osv):
    _name='correspondencia.personal'
    _inherits = {'correspondencia.gestion.presidencia':'personal_id'}
    _rec_name='ente'
    

    _columns={
        'personal_id':fields.many2one('correspondencia.gestion.presidencia','Consultoria'),
    }

    _defaults={
        'is_personal':True, 
    }
    
class correspondencia_infraestructura(osv.osv):
    _name='correspondencia.infraestructura'
    _inherits = {'correspondencia.gestion.presidencia':'infraestructura_id'}
    _rec_name='ente'

    _columns={
        'infraestructura_id':fields.many2one('correspondencia.gestion.presidencia','Infraestructura'),
    }

    _defaults={
        'is_infraestructura':True, 
    }

class correspondencia_dir_general(osv.osv):
    _name='correspondencia.dir.general'
    _inherits = {'correspondencia.gestion.presidencia':'dir_general_id'}
    _rec_name='ente'

    _columns={
        'dir_general_id':fields.many2one('correspondencia.gestion.presidencia','Dirección General'),
    }
    
    _defaults={
        'is_providencia':True, 
    }
    
class correspondencia_punto_cuenta(osv.osv):
    _name='correspondencia.punto.cuenta'
    _inherits = {'correspondencia.gestion.presidencia':'punto_cuenta_id'}
    _rec_name='ente'

    _columns={
        'beneficiario': fields.char('Beneficiario',size=50),
        'direccion_remitiente': fields.many2one('correspondencia.remitente','Direccion Remitente',required=True),
        'punto_cuenta_id':fields.many2one('correspondencia.gestion.presidencia','Dirección General'),
    }

    _defaults={
        'is_pto_cuenta':True, 
    }
    
class correspondencia_transferencia(osv.osv):
    _name='correspondencia.transferencia'
    _inherits = {'correspondencia.gestion.presidencia':'transferencia_id'}
    _rec_name='ente'

    _columns={
        'transferencia_monto': fields.float('Monto'),
        'transferencia_id':fields.many2one('correspondencia.gestion.presidencia','Transferencia'),
    }

    _defaults={
        'is_transferencia':True, 
    }

class correspondencia_administracion(osv.osv):
    _name='correspondencia.administracion'
    _inherits = {'correspondencia.gestion.presidencia':'administracion_id'}
    _rec_name='ente'

    _columns={
        'administracion_id':fields.many2one('correspondencia.gestion.presidencia','Administración'),
    }

    _defaults={
        'is_administracion':True, 
    }

class correspondencia_upe(osv.osv):
    _name='correspondencia.upe'
    _inherits = {'correspondencia.gestion.presidencia':'correspondencia_upe_id'}
    _rec_name='ente'

    _columns={
        'correspondencia_upe_id':fields.many2one('correspondencia.gestion.presidencia','UPE'),
    }

    _defaults={
        'is_upe':True, 
    }

class correspondencia_auditoria_int(osv.osv):
    _name='correspondencia.auditoria.int'
    _inherits = {'correspondencia.gestion.presidencia':'auditoria_int_id'}
    _rec_name='ente'

    _columns={
        'auditoria_int_id':fields.many2one('correspondencia.gestion.presidencia','Auditoria Interna'),
    }

    _defaults={
        'is_auditoria':True, 
    }
    
class correspondencia_planificacion(osv.osv):
    _name='correspondencia.planificacion'
    _inherits = {'correspondencia.gestion.presidencia':'planificacion_id'}
    _rec_name='ente'

    _columns={
        'planificacion_id':fields.many2one('correspondencia.gestion.presidencia','Planificación'),
    }

    _defaults={
        'is_planificacion':True, 
    }

class correspondencia_informatica(osv.osv):
    _name='correspondencia.informatica'
    _inherits = {'correspondencia.gestion.presidencia':'informatica_id'}
    _rec_name='ente'

    _columns={
        'informatica_id':fields.many2one('correspondencia.gestion.presidencia','Informatica'),
    }

    _defaults={
        'is_informatica':True, 
    }
